{
  Attribute:
// <auto-generated/>
namespace FizzBuzzWhizz;

[System.AttributeUsage(System.AttributeTargets.Class)]
public class FizzBuzzWhizzAttribute : System.Attribute
{
    private FizzBuzzWhizzAttribute()
    {
    }

    /// <summary>
    /// An attribute to mark a partial class for processing by the FizzBuzzWhizz engine.
    /// </summary>
    /// <param name="rules">
    /// A sequence of strings denoting one or many pairs.
    /// Every odd item must be a string value, every even item parsable to a long
    /// e.g. <c>["Fizz", "3", "Buzz", "5"]</c>.
    /// </param>
    /// <exception cref="System.ArgumentNullException"></exception>
    /// <exception cref="System.ArgumentException"></exception>
    public FizzBuzzWhizzAttribute(params string[] rules)
    {
    }
},
  Class:
// <auto-generated/>
namespace TestNamespace;

partial class FizzBuzz
{
    public string Identity(long n)
    {
        if (n == 0)
        {
            return "0";
        }

        return (n % 3, n % 5) switch
        {
            (0, 0) => "FizzBuzz",
            (_, 0) => "Buzz",
            (0, _) => "Fizz",
            _ => n.ToString()
        };
    }
}

}